{"version":3,"sources":["Maze/makeMoveUtils.js","Maze/FiveBoxRow.js","Maze/Maze.js","App.js","serviceWorker.js","index.js"],"names":["e","curPlayerPos","updatePlayerPosFunc","block0Pos","a","key","x","y","FiveBoxRow","rowid","numCols","curBotPos","updateBotPosFunc","upDateCurStatus","curStatus","document","onkeydown","console","log","makeBotMove","makePayerMove","className","numBoxes","curBoxPos","accumulator","box","push","renderBoxesInRow","Maze","data","useState","status","numRows","randomOrWASD","makeRandomMovesOrWASDOnly","React","useEffect","disabled","type","defaultChecked","row","renderRows","style","textAlign","fontSize","intervalAfterPlayerClick","intervalBeforeBotMove","mapRandIdx","setInterval","random_idx","Math","random","toFixed","KeyboardEvent","char","dispatchEvent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UAwCA,WAA6BA,EAAGC,EAAcC,EAAqBC,GAAnE,SAAAC,EAAA,sDAImB,cAAVJ,EAAEK,KACiB,IAAnBJ,EAAaK,GACXL,EAAaK,EAAI,IAAMH,EAAUG,GAAOL,EAAaM,IAAMJ,EAAUI,EAK9D,eAAVP,EAAEK,KACkB,IAAnBJ,EAAaK,GACXL,EAAaK,EAAI,IAAMH,EAAUG,GAAQL,EAAaM,IAAMJ,EAAUI,EAW9D,YAAVP,EAAEK,KACiB,IAAnBJ,EAAaM,GACXN,EAAaM,EAAI,IAAMJ,EAAUI,GAAON,EAAaK,IAAMH,EAAUG,EAK7D,cAAVN,EAAEK,KACiB,IAAnBJ,EAAaM,GACXN,EAAaM,EAAI,IAAMJ,EAAUI,GAAON,EAAaK,IAAMH,EAAUG,GAExEJ,EAAoB,CAAEI,EAAGL,EAAaK,EAAGC,EAAGN,EAAaM,EAAI,IAP7DL,EAAoB,CAAEI,EAAGL,EAAaK,EAAGC,EAAGN,EAAaM,EAAI,IAZ7DL,EAAoB,CAAEI,EAAGL,EAAaK,EAAI,EAAGC,EAAGN,EAAaM,IAR7DL,EAAoB,CAAEI,EAAGL,EAAaK,EAAI,EAAGC,EAAGN,EAAaM,IARrE,4C,sBCgCeC,MA/Df,YAOI,IANFC,EAMC,EANDA,MAAOC,EAMN,EANMA,QACPT,EAKC,EALDA,aAAcC,EAKb,EALaA,oBACdS,EAIC,EAJDA,UAAWC,EAIV,EAJUA,iBACXT,EAGC,EAHDA,UACAU,EAEC,EAFDA,gBACAC,EACC,EADDA,UAkDA,OA/CAC,SAASC,UAAY,SAAShB,GAC5BiB,QAAQC,IAAIlB,EAAEK,KAII,kCAAdS,GAAiE,uBAAdA,GAChC,IAAnBb,EAAaK,GAAgC,IAAnBL,EAAaM,GAEvCM,EAAgB,gBDnBxB,SAAqBb,EAAGW,EAAWC,EAAkBT,GAElC,MAAVH,EAAEK,KACc,IAAhBM,EAAUL,GACRK,EAAUL,EAAI,IAAMH,EAAUG,GAAOK,EAAUJ,IAAMJ,EAAUI,EAKvD,MAAVP,EAAEK,KACc,IAAhBM,EAAUL,GACRK,EAAUL,EAAI,IAAMH,EAAUG,GAAQK,EAAUJ,IAAMJ,EAAUI,EAKzD,MAAVP,EAAEK,KACe,IAAhBM,EAAUJ,GACRI,EAAUJ,EAAI,IAAMJ,EAAUI,GAAOI,EAAUL,IAAMH,EAAUG,EAKvD,MAAVN,EAAEK,KACc,IAAhBM,EAAUJ,GACRI,EAAUJ,EAAI,IAAMJ,EAAUI,GAAOI,EAAUL,IAAMH,EAAUG,GAElEM,EAAiB,CAAEN,EAAGK,EAAUL,EAAGC,EAAGI,EAAUJ,EAAI,IAPpDK,EAAiB,CAAEN,EAAGK,EAAUL,EAAGC,EAAGI,EAAUJ,EAAI,IAPpDK,EAAiB,CAAEN,EAAGK,EAAUL,EAAI,EAAGC,EAAGI,EAAUJ,IAPpDK,EAAiB,CAAEN,EAAGK,EAAUL,EAAI,EAAGC,EAAGI,EAAUJ,ICgBxDY,CAAYnB,EAAGW,EAAWC,EAAkBT,G,0CAC5CiB,CAAcpB,EAAGC,EAAcC,EAAqBC,IAoCpD,yBAAKkB,UAAU,uBAbjB,SAA0BC,GAExB,IADA,IAnBmBC,EAmBfC,EAAc,GACVC,EAAI,EAAGA,EAAIH,EAAUG,IAC3BD,EAAYE,KACV,yBAAKL,UAAU,MAAMhB,IAAKoB,IAtBXF,EAuBA,CAACjB,EAAGmB,EAAKlB,EAAGE,GArB1BN,EAAUG,IAAMiB,EAAUjB,GAAOH,EAAUI,IAAMgB,EAAUhB,EAjCxD,QAqCEI,EAAUL,IAAMiB,EAAUjB,GAAOK,EAAUJ,IAAMgB,EAAUhB,EAnC1D,IAuCDN,EAAaK,IAAMiB,EAAUjB,GAAOL,EAAaM,IAAMgB,EAAUhB,EAxClE,IAED,MAuDR,OAAOiB,EAKJG,CAAiBjB,K,MCyBTkB,MAxFf,YAAuB,IAARC,EAAO,EAAPA,KAAO,EAEsBC,mBAASD,EAAK,IAFpC,mBAEf5B,EAFe,KAEDC,EAFC,OAGgB4B,mBAASD,EAAK,IAH9B,mBAGflB,EAHe,KAGJC,EAHI,OAIekB,mBAASD,EAAK,GAAGE,QAJhC,mBAIfjB,EAJe,KAIJD,EAJI,KAKhBmB,EAAUH,EAAK,GAAGG,QAClBtB,EAAUmB,EAAK,GAAGnB,QAClBuB,EAAeJ,EAAK,GAAGK,0BAqD3B,OAlDAC,IAAMC,WAAU,WACZnB,QAAQC,IAAI,cAAejB,EAAcU,GACpCV,EAAaK,IAAMK,EAAUL,GAAKL,EAAaM,IAAMI,EAAUJ,IAElEK,EAAiB,CAACN,EAAG,EAAGC,EAAG,IAC3BL,EAAoB,CAACI,EAAG,EAAGC,EAAG,IAC9BM,EAAgB,iCAChBI,QAAQC,IAAI,gBAGhB,CAACjB,EAAcU,IAyCf,6BACE,yBAAKU,UAAU,YAAf,sBAGA,yBAAKA,UAAU,SAAf,wBAEE,8BAAM,2BAAOgB,UAAU,EAAMC,KAAK,WAAWC,eAAiC,WAAjBN,IAA7D,YACA,8BAAM,2BAAOI,UAAU,EAAMC,KAAK,WAAWC,gBAAgB,IAA7D,SACA,6BAJF,UAKE,8BAAM,2BAAOF,UAAU,EAAMC,KAAK,WAAWC,gBAAgB,IAA7D,cACA,8BAAM,2BAAOF,UAAU,EAAMC,KAAK,WAAWC,gBAAgB,IAA7D,cAEF,yBAAKlB,UAAU,iBApBf,6BA5BF,SAAoBW,GAElB,IADA,IAAIR,EAAc,GACTgB,EAAI,EAAGA,EAAIR,EAASQ,IAC3BhB,EAAYE,KACV,kBAAC,EAAD,CACErB,IAAKmC,EACL/B,MAAO+B,EACP9B,QAASA,EACTP,UAAW0B,EAAK,GAEhB5B,aAAcA,EACdC,oBAAqBA,EAErBS,UAAWA,EACXC,iBAAkBA,EAElBE,UAAWA,EACXD,gBAAiBA,KAIvB,OAAOW,EAQJiB,CAAWT,KAsBd,yBAAKX,UAAU,aACZP,GAEH,yBAAK4B,MAAO,CAACC,UAAU,SAAUC,SAAU,YACzC,6BADF,yCAEwC,6BAFxC,oCC/EAf,EAAO,CAEX,CAACvB,EAAG,EAAGC,EAAG,GAEV,CAACD,EAAG,EAAGC,EAAG,GAGV,CAACD,EAAG,EAAGC,EAAG,GAEV,CAACwB,OAAQ,sBAET,CACEC,QAAS,EACTtB,QAAS,EACTmC,yBAA0B,IAC1BC,sBAAuB,IAEvBZ,0BAA2B,SAMzBa,EAAa,CACjB,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,eAEOC,aACZ,WACE,IAAIC,GAA8B,EAAhBC,KAAKC,UAAcC,QAAQ,GAE7C,GAA+B,iBAA3BL,EAAWE,GAA+B,CAC5C,IAAIjD,EAAI,IAAIqD,cAAc,UAAW,CACnChD,IAAO0C,EAAWE,GAClBK,KAAOP,EAAWE,KAIsB,WAAtCpB,EAAK,GAAGK,0BACVnB,SAASwC,cAAcvD,GACd6B,EAAK,GAAGK,6BAKrBL,EAAK,GAAGiB,uBAeGU,MATf,WAEE,OACE,6BACE,kBAAC,EAAD,CAAM3B,KAAMA,MClDE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjD,SAASkD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.e8ff716a.chunk.js","sourcesContent":["// Box boundary constraints and block collisions - all that code goes here.\n// `makeMove` functions are excuted for every button press!\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction makeBotMove(e, curBotPos, updateBotPosFunc, block0Pos) {\n    if (\n        (e.key === 'a') &&\n        (curBotPos.x !== 0) &&\n        !((curBotPos.x - 1 === block0Pos.x) && (curBotPos.y === block0Pos.y))\n    ) {\n        updateBotPosFunc({ x: curBotPos.x - 1, y: curBotPos.y })\n    }\n    else if (\n        (e.key === 'd') &&\n        (curBotPos.x !== 4) &&\n        !((curBotPos.x + 1 === block0Pos.x) && ((curBotPos.y === block0Pos.y)))\n    ) {\n        updateBotPosFunc({ x: curBotPos.x + 1, y: curBotPos.y })\n    }\n    else if ((\n        e.key === 'w') &&\n        (curBotPos.y !== 0) &&\n        !((curBotPos.y - 1 === block0Pos.y) && (curBotPos.x === block0Pos.x))\n    ) {\n        updateBotPosFunc({ x: curBotPos.x, y: curBotPos.y - 1 })\n    }\n    else if (\n        (e.key === 's') &&\n        (curBotPos.y !== 4) &&\n        !((curBotPos.y + 1 === block0Pos.y) && (curBotPos.x === block0Pos.x))\n    ) {\n        updateBotPosFunc({ x: curBotPos.x, y: curBotPos.y + 1 })\n    }\n}\n\n\n\nasync function makePayerMove(e, curPlayerPos, updatePlayerPosFunc, block0Pos) {\n    //await sleep(100) // ? Make it after\n    \n    if (\n        (e.key === 'ArrowLeft') &&\n        (curPlayerPos.x !== 0) &&\n        !((curPlayerPos.x - 1 === block0Pos.x) && (curPlayerPos.y === block0Pos.y))\n    ) {\n        updatePlayerPosFunc({ x: curPlayerPos.x - 1, y: curPlayerPos.y })\n    }\n    else if ((\n        e.key === 'ArrowRight') &&\n        (curPlayerPos.x !== 4) &&\n        !((curPlayerPos.x + 1 === block0Pos.x) && ((curPlayerPos.y === block0Pos.y)))\n    ) {\n        \n        updatePlayerPosFunc({ x: curPlayerPos.x + 1, y: curPlayerPos.y })\n        // updatePlayerPosFunc({ x: curPlayerPos.x + 1, y: curPlayerPos.y }, async (n) => {\n        //     //console.log(n.x) // curPlayerPos.x\n        //     await sleep(1000)\n        // })\n\n    }\n    else if (\n        (e.key === 'ArrowUp') &&\n        (curPlayerPos.y !== 0) &&\n        !((curPlayerPos.y - 1 === block0Pos.y) && (curPlayerPos.x === block0Pos.x))\n    ) {\n        updatePlayerPosFunc({ x: curPlayerPos.x, y: curPlayerPos.y - 1 })\n    }\n    else if (\n        (e.key === 'ArrowDown') &&\n        (curPlayerPos.y !== 4) &&\n        !((curPlayerPos.y + 1 === block0Pos.y) && (curPlayerPos.x === block0Pos.x))\n    ) {\n        updatePlayerPosFunc({ x: curPlayerPos.x, y: curPlayerPos.y + 1 })\n    }\n  }\n  \n  \nexport { makeBotMove, makePayerMove }","import React from 'react';\nimport './FiveBoxRow.css'\nimport {makeBotMove, makePayerMove} from './makeMoveUtils'\n\nvar BLOCK = 'block'\nvar PLAYER = 'x'\nvar OPPONENT = 'o'\nvar EMPTY = ''\n\nfunction FiveBoxRow({\n  rowid, numCols,\n  curPlayerPos, updatePlayerPosFunc, \n  curBotPos, updateBotPosFunc,\n  block0Pos, // add more blocks\n  upDateCurStatus,\n  curStatus\n}) {\n\n  document.onkeydown = function(e) {  \n    console.log(e.key) // log any key\n    // update status and make moves\n    // the only update inside n^2 (runs only once until gameover)\n    if (\n      ((curStatus === 'Game Over! Move to Start Game') || (curStatus === 'Move to Start Game')) && \n      ((curPlayerPos.x === 0) && (curPlayerPos.y === 0)) // add bot if game is reversed\n      ){\n        upDateCurStatus('Game Started')\n    }\n\n    makeBotMove(e, curBotPos, updateBotPosFunc, block0Pos)\n    makePayerMove(e, curPlayerPos, updatePlayerPosFunc, block0Pos)\n  };\n\n  // simple function: has nothing to d w/ collision\n  // renders into boxes based on: box position in n^2 loop\n  function getBoxValue(curBoxPos){\n    // put blocks if any \n    if ((block0Pos.x === curBoxPos.x) && (block0Pos.y === curBoxPos.y)) {\n      return BLOCK\n    }       \n    // update bot pos\n    else if ((curBotPos.x === curBoxPos.x) && (curBotPos.y === curBoxPos.y)) {\n      return OPPONENT\n    }\n    // update player pos\n    else if ((curPlayerPos.x === curBoxPos.x) && (curPlayerPos.y === curBoxPos.y)) {\n      return PLAYER\n    } \n    else { \n      return EMPTY //`${curBoxPos.x}, ${curBoxPos.y}` // return EMPTY instead\n    }\n  }\n\n  function renderBoxesInRow(numBoxes){\n    var accumulator = []\n    for(let box=0; box<numBoxes; box++){\n      accumulator.push(\n        <div className='box' key={box} >\n          {getBoxValue({x: box, y: rowid})}\n        </div>\n      )\n    }\n    return accumulator\n  }\n\n  return (\n    <div className='FiveBoxRowContainer'>\n      {renderBoxesInRow(numCols)}\n    </div>\n  )\n}\n\nexport default FiveBoxRow","import React, {useState} from 'react';\nimport FiveBoxRow from './FiveBoxRow.js'\nimport './Maze.css'\n\nfunction Maze({data}) {\n  // generate use states here...\n  var [curPlayerPos, updatePlayerPosFunc] = useState(data[0])\n  var [curBotPos, updateBotPosFunc] = useState(data[1])\n  var [curStatus, upDateCurStatus] = useState(data[3].status)\n  var numRows = data[4].numRows\n  var numCols = data[4].numCols\n  var randomOrWASD = data[4].makeRandomMovesOrWASDOnly\n\n\n  React.useEffect(() => {\n      console.log('From uesef:', curPlayerPos, curBotPos) // send it to api (doesn't update for blocks and boundaries)\n      if ((curPlayerPos.x === curBotPos.x)&&(curPlayerPos.y === curBotPos.y)) {\n        // reset: will update use effect too\n        updateBotPosFunc({x: 4, y: 4})\n        updatePlayerPosFunc({x: 0, y: 0})\n        upDateCurStatus('Game Over! Move to Start Game')\n        console.log('Game over')\n      }\n    }, \n    [curPlayerPos, curBotPos]\n  );\n\n  function rederGrid(){\n    \n    function renderRows(numRows) {\n      var accumulator = []\n      for (let row=0; row<numRows; row++) {\n        accumulator.push(\n          <FiveBoxRow \n            key={row} \n            rowid={row} \n            numCols={numCols}\n            block0Pos={data[2]} // add more blocks \n            // ---\n            curPlayerPos={curPlayerPos}\n            updatePlayerPosFunc={updatePlayerPosFunc} \n            // ---\n            curBotPos={curBotPos}\n            updateBotPosFunc={updateBotPosFunc} \n            // ----\n            curStatus={curStatus}\n            upDateCurStatus={upDateCurStatus}\n          />\n        )\n      }\n      return accumulator\n    }\n    // Note: This executes for every box \n    // when the component us updated by `useState`\n    // Any code inside it (for r..., for c... loop)\n    // will be exectuted (r*c) times\n    return (\n      <div>\n        {renderRows(numRows)}\n      </div>\n    )    \n  }\n\n  // return Maze\n  return (\n    <div>\n      <div className=\"mazeHead\">\n        Catch The Opponent\n      </div>\n      <div className='Extra'>\n        How to move opponent?\n        <span><input disabled={true} type=\"checkbox\" defaultChecked={randomOrWASD === 'random'} /> Random </span>\n        <span><input disabled={true} type=\"checkbox\" defaultChecked={false} /> Bot </span>\n        <br/>Play as \n        <span><input disabled={true} type=\"checkbox\" defaultChecked={false} /> Opponent </span>\n        <span><input disabled={true} type=\"checkbox\" defaultChecked={true} /> Catcher </span>\n      </div>\n      <div className='mazeContainer'>\n        {rederGrid()}\n      </div>\n      <div className='curStatus'>\n        {curStatus}\n      </div>\n      <div style={{textAlign:\"center\", fontSize: 'x-small'}}>\n        <br/>\n        (Swipes for touchscreen not yet added)<br/>\n        Use arrow keys to move player.\n      </div>\n    </div>\n  )\n}\n\nexport default Maze","import React from 'react';\nimport Maze from './Maze/Maze.js'\n\n// from api ===============================================================================================\nconst data = [\n  // 0: position of p1 - player\n  {x: 0, y: 0},\n  // 1: posistion of p2 - bot\n  {x: 4, y: 4},\n  // 2: similarly add moving / static blocks.\n  // for eg, static block: (useState for dynamic)\n  {x: 1, y: 1},\n  // 3: cur status\n  {status: 'Move to Start Game'},\n  // 4: extra information\n  {\n    numRows: 5,\n    numCols: 5,\n    intervalAfterPlayerClick: 500, // ? todo: make it 'before'\n    intervalBeforeBotMove: 3000,\n    // toggle to stop random mover and use w-a-s-d keys only.\n    makeRandomMovesOrWASDOnly: 'WASD' // 'random' (or) 'WASD' \n  }\n]\n// end: from api ==========================================================================================\n\n// automate bot key event =================================================================================\nconst mapRandIdx = {\n  \"0\": 'w',\n  \"1\": 'a',\n  \"2\": 's',\n  \"3\": 'd',\n  \"4\": '<donothing>', // wait - new state in MDP\n}\nlet timerId = setInterval( // use timerId in future to teminate\n  () => {\n    var random_idx = (Math.random() * 3).toFixed(0) // [0, 4]\n    // if not `<donothing>`, press the key randomly\n    if (mapRandIdx[random_idx] !== '<do-nothing>'){\n      var e = new KeyboardEvent(\"keydown\", {\n        key  : mapRandIdx[random_idx], \n        char : mapRandIdx[random_idx]\n      })\n      // press key\n      // !todo: STRICLY mention w-a-s-d for both 'random' and 'WASD'\n      if (data[4].makeRandomMovesOrWASDOnly === 'random'){\n        document.dispatchEvent(e)\n      } else if (data[4].makeRandomMovesOrWASDOnly === 'WASD') { \n        // pass\n      }\n    }\n  }\n  , data[4].intervalBeforeBotMove\n);\n// end: automate bot key event =============================================================================\n\n\n\nfunction App() {\n\n  return (\n    <div>\n      <Maze data={data}/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}